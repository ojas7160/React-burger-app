{"ast":null,"code":"import _defineProperty from \"D:\\\\React-burger-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\React-burger-app\\\\src\\\\containers\\\\Checkout\\\\ContactData\\\\ContactData.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport './ContactData.css';\nimport AxiosInstance from '../../../axios-orders';\nimport Input from '../../../components/UI/Input/Input';\nimport { connect } from 'react-redux';\nimport withErrorHandler from '../../../Auxilury/withErrorHandling/withErrorHandling';\nimport * as actions from '../../../store/actions/index';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'your name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        address: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'your Address'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        phone: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'your Phone'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'your email'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: 'fastest',\n          validation: {\n            required: false\n          },\n          valid: true,\n          touched: false\n        }\n      },\n      loading: false,\n      formIsValid: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault(); // prevent to reload the page\n\n      this.setState({\n        loading: true\n      });\n      const formData = {};\n\n      for (let form in this.state.orderForm) {\n        formData[form] = this.state.orderForm[form].value;\n      }\n\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.price,\n        orderData: formData // AxiosInstance.get('orders.json')\n        // .then(res => {\n        // \tconsole.log(res)\n        // })\n        // .catch(err => {\n        // \tconsole.log(err)\n        // })\n\n      };\n      AxiosInstance.post('orders.json', order).then(res => {\n        console.log(res);\n        this.setState({\n          loading: false\n        });\n        this.props.history.push(\"/\");\n      }).catch(err => {\n        console.log(err);\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.inputChangeHandler = (event, inputIdentifier) => {\n      console.log(\"TCL: ContactData -> inputChangeHandler -> inputIdentifier\", inputIdentifier);\n      console.log(event.target.value);\n\n      const updatedOrderForm = _objectSpread({}, this.state.orderForm);\n\n      const updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = false;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '';\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, formElementArray.map(formElement => React.createElement(Input, {\n      changed: event => this.inputChangeHandler(event, formElement.id),\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      shouldValidate: formElement.config.validation,\n      invalid: !formElement.config.valid,\n      touched: formElement.config.touched,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    })), React.createElement(Button, {\n      className: \"Input\",\n      btnType: \"Success\",\n      disabled: !this.state.formIsValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Order\"));\n\n    if (this.state.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"ContactData\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Enter your contact data\"), form);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ingredients: state.ingredients,\n    price: state.totalPrice\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  onOrderBurger: () => {\n    dispatch(actions.purchaseBurgerStart);\n  };\n};\n\nexport default connect(mapStateToProps)(withErrorHandler(ContactData, AxiosInstance));","map":{"version":3,"sources":["D:\\React-burger-app\\src\\containers\\Checkout\\ContactData\\ContactData.js"],"names":["React","Component","Button","Spinner","AxiosInstance","Input","connect","withErrorHandler","actions","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","address","phone","email","deliveryMethod","options","displayValue","loading","formIsValid","orderHandler","event","preventDefault","setState","formData","form","order","ingredients","props","price","orderData","post","then","res","console","log","history","push","catch","err","inputChangeHandler","inputIdentifier","target","updatedOrderForm","updatedFormElement","checkValidity","rules","isValid","trim","render","formElementArray","key","id","config","map","formElement","mapStateToProps","totalPrice","mapDispatchToProps","dispatch","onOrderBurger","purchaseBurgerStart"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport './ContactData.css';\nimport AxiosInstance from '../../../axios-orders';\nimport Input from '../../../components/UI/Input/Input';\nimport { connect } from 'react-redux';\nimport withErrorHandler from '../../../Auxilury/withErrorHandling/withErrorHandling';\nimport * as actions from '../../../store/actions/index';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'your name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            address: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'your Address'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            phone: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'your Phone'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'your email'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}\n                    ]\n                },\n                value: 'fastest',\n                validation: {required: false},\n                valid: true,\n                touched: false\n            }\n        },\n        loading: false,\n        formIsValid: false\n    }\n    \n    checkValidity (value, rules) {\n        let isValid = false;\n        if(!rules) {\n            return true;\n        }\n\n        if(rules.required) {\n            isValid = value.trim() !== '';\n        }\n        return isValid;\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault(); // prevent to reload the page\n        this.setState({loading: true})\n        const formData = {}\n        for(let form in this.state.orderForm) {\n            formData[form] = this.state.orderForm[form].value\n        }\n\t\tconst order = {\n\t\t\tingredients: this.props.ingredients,\n            price: this.props.price,\n            orderData: formData \n\t\t}\n\n\t\t// AxiosInstance.get('orders.json')\n\t\t// .then(res => {\n\t\t// \tconsole.log(res)\n\t\t// })\n\t\t// .catch(err => {\n\t\t// \tconsole.log(err)\n\t\t// })\n\t\tAxiosInstance.post('orders.json', order)\n\t\t.then(res => {\n\t\t\tconsole.log(res)\n            this.setState({loading: false})\n            this.props.history.push(\"/\");\n\t\t})\n\t\t.catch(err => {\n\t\t\tconsole.log(err)\n\t\t\tthis.setState({loading: false})\n\t\t})\n    }\n\n    inputChangeHandler = (event, inputIdentifier) => {\n        console.log(\"TCL: ContactData -> inputChangeHandler -> inputIdentifier\", inputIdentifier)\n        console.log(event.target.value)\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        }\n        const updatedFormElement = {...updatedOrderForm[inputIdentifier]}\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation)\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        let formIsValid = true;\n        for(let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid\n        }\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n    }\n\n    render () {\n        const formElementArray = [];\n        for(let key in this.state.orderForm) {\n            formElementArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            })\n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementArray.map(formElement => (\n                    <Input changed={(event) => this.inputChangeHandler(event, formElement.id)} key={formElement.id} elementType={formElement.config.elementType} elementConfig={formElement.config.elementConfig} value={formElement.config.value} shouldValidate={formElement.config.validation} invalid={!formElement.config.valid} touched={formElement.config.touched}/>\n                ))}\n                <Button className=\"Input\" btnType=\"Success\" disabled={!this.state.formIsValid}>Order</Button>\n            </form>\n        );\n        if(this.state.loading) {\n            form = <Spinner />\n        }\n        return (\n            <div className=\"ContactData\">\n                <h4>Enter your contact data</h4>\n                {form}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ingredients: state.ingredients,\n        price: state.totalPrice\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    onOrderBurger: () => {\n        dispatch(actions.purchaseBurgerStart)\n    }\n}\n\nexport default connect(mapStateToProps)(withErrorHandler(ContactData, AxiosInstance));"]},"metadata":{},"sourceType":"module"}