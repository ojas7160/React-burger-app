{"ast":null,"code":"var _jsxFileName = \"/home/ojaswi/codes/react-burger-app/src/Auxilury/withErrorHandling/withErrorHandling.js\";\nimport React, { Component } from 'react';\nimport Modal from '../../components/UI/Modal/Modal';\nimport Aux from '../../Auxilury/Auxi';\n\nconst errorHandler = (WrappedComponent, axios) => {\n  var _temp;\n\n  return _temp = class extends Component {\n    constructor(...args) {\n      super(...args);\n      this.state = {\n        error: null\n      };\n\n      this.errorConfirmedHandler = () => {\n        this.setState({\n          error: null\n        });\n      };\n    }\n\n    componentWillMount() {\n      this.reqInterceptor = axios.interceptors.request.use(null, req => {\n        this.setState({\n          error: null\n        });\n        return req;\n      });\n      this.resInterceptor = axios.interceptors.response.use(res => res, error => {\n        this.setState({\n          error: error\n        });\n        return error;\n      });\n    }\n\n    componentWillUnmount() {}\n\n    render() {\n      return React.createElement(Aux, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(Modal, {\n        show: this.state.error,\n        modalClosed: this.errorConfirmedHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, this.state.error ? this.state.error.message : null), React.createElement(WrappedComponent, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      })));\n    }\n\n  }, _temp;\n};\n\nexport default errorHandler;","map":{"version":3,"sources":["/home/ojaswi/codes/react-burger-app/src/Auxilury/withErrorHandling/withErrorHandling.js"],"names":["React","Component","Modal","Aux","errorHandler","WrappedComponent","axios","state","error","errorConfirmedHandler","setState","componentWillMount","reqInterceptor","interceptors","request","use","req","resInterceptor","response","res","componentWillUnmount","render","message","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;;AAEA,MAAMC,YAAY,GAAG,CAACC,gBAAD,EAAmBC,KAAnB,KAA6B;AAAA;;AAC9C,iBAAO,cAAcL,SAAd,CAAwB;AAAA;AAAA;AAAA,WAC3BM,KAD2B,GACnB;AACJC,QAAAA,KAAK,EAAE;AADH,OADmB;;AAAA,WAoB3BC,qBApB2B,GAoBH,MAAM;AAC1B,aAAKC,QAAL,CAAc;AAACF,UAAAA,KAAK,EAAE;AAAR,SAAd;AACH,OAtB0B;AAAA;;AAI3BG,IAAAA,kBAAkB,GAAI;AAClB,WAAKC,cAAL,GAAsBN,KAAK,CAACO,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,IAA/B,EAAqCC,GAAG,IAAI;AAC9D,aAAKN,QAAL,CAAc;AAACF,UAAAA,KAAK,EAAE;AAAR,SAAd;AACA,eAAOQ,GAAP;AACH,OAHqB,CAAtB;AAKA,WAAKC,cAAL,GAAsBX,KAAK,CAACO,YAAN,CAAmBK,QAAnB,CAA4BH,GAA5B,CAAgCI,GAAG,IAAIA,GAAvC,EAA4CX,KAAK,IAAI;AACvE,aAAKE,QAAL,CAAc;AAACF,UAAAA,KAAK,EAAEA;AAAR,SAAd;AACA,eAAOA,KAAP;AACH,OAHqB,CAAtB;AAIH;;AAEDY,IAAAA,oBAAoB,GAAG,CAEtB;;AAMDC,IAAAA,MAAM,GAAI;AACN,aACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,KAAKd,KAAL,CAAWC,KAAxB;AAA+B,QAAA,WAAW,EAAE,KAAKC,qBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKF,KAAL,CAAWC,KAAX,GAAmB,KAAKD,KAAL,CAAWC,KAAX,CAAiBc,OAApC,GAA8C,IADnD,CADJ,EAII,oBAAC,gBAAD,oBAAsB,KAAKC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ,CADJ;AAQH;;AAjC0B,GAA/B;AAoCH,CArCD;;AAsCA,eAAenB,YAAf","sourcesContent":["import React, { Component } from 'react';\nimport Modal from '../../components/UI/Modal/Modal';\nimport Aux from '../../Auxilury/Auxi';\n\nconst errorHandler = (WrappedComponent, axios) => {\n    return class extends Component {\n        state = {\n            error: null\n        }\n        componentWillMount () {\n            this.reqInterceptor = axios.interceptors.request.use(null, req => {\n                this.setState({error: null})\n                return req;\n            })\n\n            this.resInterceptor = axios.interceptors.response.use(res => res, error => {\n                this.setState({error: error})\n                return error;\n            })\n        }\n\n        componentWillUnmount() {\n\n        }\n\n        errorConfirmedHandler = () => {\n            this.setState({error: null})\n        }\n\n        render () {\n            return (\n                <Aux>\n                    <Modal show={this.state.error} modalClosed={this.errorConfirmedHandler}>\n                        {this.state.error ? this.state.error.message : null}\n                    </Modal>\n                    <WrappedComponent {...this.props} />\n                </Aux>\n            );\n        }\n        \n    }\n}\nexport default errorHandler;"]},"metadata":{},"sourceType":"module"}